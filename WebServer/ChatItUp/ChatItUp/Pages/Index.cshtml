@page
@model IndexModel
@inject Services.ChatService ChatService

@{
    //var recentMessages = await ChatService.GetRecentMessagesAsync();
}
@section HeaderScripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/js/Chat.js" asp-append-version="true"></script>
}
@section Styles {
    <style>
        #connectionStatus {
            background-color: yellow;
            color: black;
            text-align: center;
            width: 100%;
            padding: 10px 0;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1000; /* Ensures it's above other content */
        }

        .hidden {
            display: none !important;
        }

        .visible {
            display: block !important;
        }

        .chat-container {
            display: flex;
            align-items: stretch;
            min-height: 300px;
            max-height: 80vh;
        }

        .resize-handle {
            background: #ccc;
            cursor: ew-resize;
            width: 2px;
            margin-left: 2px;
            margin-right: 2px;
        }

        .panel-highlight {
            border: 2px solid #007bff;
        }

        #serverList {
            border-right: 1px solid #ddd;
            padding: 10px;
            width: 120px;
            min-height: 300px;
            max-height: 80vh;
            overflow: auto;
        }

        #channelList {
            min-width: 150px;
            border-right: 1px solid #ddd;
            padding: 5px;
            min-height: 300px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .server {
            border: 1px solid #aaa;
            padding: 5px;
            cursor: pointer;
        }

        .channel {
            border: 1px solid #aaa;
            padding: 5px;
            margin-bottom: 2px;
            cursor: pointer;
        }

            .server:hover, .channel:hover {
                background-color: #f0f0f0;
            }

        .selected-server, .selected-channel {
            background-color: #ddd; /* Background color for selected server/channel */
        }

        .server img {
            cursor: pointer;
            transition: transform 0.2s; /* Animation for hover effect */
        }

            .server img:hover {
                transform: scale(1.1); /* Slightly enlarges the thumbnail on hover */
            }

        #messages {
            flex-grow: 1;
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 20px;
            max-height: 80px;
            overflow-y: scroll;
            display: flex;
            flex-direction: column-reverse; /* Keep the scroll bar at the bottom initially */
        }

        .context-menu {
            display: none;
            position: fixed;
            z-index: 1000;
            width: 200px;
            background: white;
            border: 1px solid #ddd;
            box-shadow: 0px 0px 5px #aaa;
        }

            .context-menu ul {
                list-style: none;
                margin: 0;
                padding: 0;
            }

                .context-menu ul li {
                    padding: 10px;
                    cursor: pointer;
                }

                    .context-menu ul li:hover {
                        background-color: #f0f0f0;
                    }

        #userList div {
            padding: 5px;
            margin-bottom: 5px;
            border-bottom: 1px solid #eee;
        }

        #toggleUserListBtn {
            padding: 2px 5px; /* Reduce vertical padding */
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            display: inline-block;
            font-size: 16px; /* Adjust based on your content */
            line-height: 1; /* Adjust line height to fit the content */
            max-height: 20px;
        }


            #toggleUserListBtn:hover {
                background-color: #0056b3;
            }

        .user-item {
            display: flex;
            align-items: center;
            gap: 8px; /* Adjust spacing between elements */
            margin-bottom: 10px; /* Space between user items */
        }

        .status-icon, .owner-icon {
            width: 32px; /* Adjust size as needed */
            height: 32px; /* Adjust size as needed */
        }

        #messageContainer {
            min-width: 303px;
        }

        #messageInputContainer {
            display: flex;
            align-items: flex-start; /* Aligns items to the start of the cross axis (top of the container) */
            width: 100%; /* Takes the full width of its parent */
            padding: 10px; /* Optional: Adds some spacing around the inner elements */
        }

        #messageInput {
            resize: vertical;
            width: calc(100% - 50px); /* Adjusts width to fill available space, accounting for button width and potential padding/margin */
            margin-right: 10px; /* Adds some space between the textarea and the button */
            flex-grow: 1; /* Allows the textarea to grow and fill the available space */
            box-sizing: border-box; /* Includes padding and border in the element's total width and height */
            max-height: 50vh;
            min-height: 50px;
        }

        #sendButton {
            white-space: nowrap; /* Prevents the text inside the button from wrapping */
            padding: 8px 8px; /* Adjust padding to match the height of the textarea */
            height: 50px;
            align-self: start; /* Aligns the button to the top of the container */
        }
    </style>
}


<!-- Modal Backdrop -->
<div id="modalBackdrop" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:1040;"></div>

<!-- Modal Content -->
<div id="modalContent" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); z-index:1050; background:white; padding:40px; border-radius:5px; border: 2px solid #000; max-width:90%; max-height:90%; overflow:auto;">
    <!-- AJAX content will be loaded here -->
</div>


<div id="connectionStatus" class="hidden">Disconnected - Attempting to reconnect...</div>

<div id="contextMenu" class="context-menu">
</div>

<span style="align-content:center"><input id="AudioCheckbox" type="checkbox" /> Audio</span>

<div class="chat-container">
    <div>

        <div id="serverList">
            <!-- Servers will be listed here -->
            <!-- Add more servers as needed -->

        </div>

    </div>

    <div id="channelList">
        <!-- Channels will be listed here -->
        <!-- Add more channels as needed -->
    </div>
    <div id="resizeChannel" class="resize-handle"></div>
    <div id="messageContainer">
        <!-- Existing message-related elements -->
        <div id="messages"></div>
        <div id="messageInputContainer">
            <textarea id="messageInput" rows="3"></textarea>
            <button id="sendButton">Send</button>
        </div>
    </div>

    <div id="resizeMessages" class="resize-handle"></div>

    <button id="toggleUserListBtn">-</button>

    <div id="userList" style="min-width: 200px; border-left: 1px solid #ddd; padding: 10px; height: 300px; overflow-y: auto;">
        <!-- User list for the selected server will be displayed here -->
    </div>
</div>
<div>
    <span id="serverInviteCode"></span>
</div>

<script>


    // Sending a message
    document.getElementById("sendButton").addEventListener("click", function (event) {
        var user = "User"; // You might want to use a more dynamic way to get the user's name
        if (selectedServerId && selectedChannelId) {
            var message = document.getElementById("messageInput").value;
            connection.invoke("SendMessage", selectedChannelId, message).catch(function (err) {
                return console.error(err.toString());
            });
            document.getElementById("messageInput").value = ''; // Clear the input after sending
            event.preventDefault();
        }
    });



    async function showModalCreateServer() {
        $.ajax({
            url: "/CreateServer", // Adjust the URL as needed
            success: function (response) {
                $("#modalContent").html(response);
                $("#modalBackdrop, #modalContent").show();
                window.OnOK = function () {

                    fetchServers();
                    $("#modalBackdrop, #modalContent").hide();

                };

                window.OnCancel = function () {
                    $("#modalBackdrop, #modalContent").hide();
                };
            },
            error: function () {
                alert("Failed to load the form.");
            }
        });

    }

    async function showModalDeleteServer(ServerId) {
        $.ajax({
            url: "/DeleteServer?ServerId=" + ServerId, // Adjust the URL as needed
            success: function (response) {
                $("#modalContent").html(response);
                $("#modalBackdrop, #modalContent").show();
                window.OnOK = function () {

                    fetchServers();
                    $("#modalBackdrop, #modalContent").hide();

                };

                window.OnCancel = function () {
                    $("#modalBackdrop, #modalContent").hide();
                };
            },
            error: function () {
                alert("Failed to load the form.");
            }
        });

    }

    async function showModalCreateChannel(ServerId) {
        $.ajax({
            url: "/CreateChannel?serverId=" + ServerId, // Adjust the URL as needed
            success: function (response) {
                $("#modalContent").html(response);
                $("#modalBackdrop, #modalContent").show();
                window.OnOK = function () {

                    fetchServers();
                    $("#modalBackdrop, #modalContent").hide();

                };

                window.OnCancel = function () {
                    $("#modalBackdrop, #modalContent").hide();
                };
            },
            error: function () {
                alert("Failed to load the form.");
            }
        });

    }

    async function showModalDeleteChannel(ChannelId) {
        $.ajax({
            url: "/DeleteChannel?ChannelId=" + ChannelId, // Adjust the URL as needed
            success: function (response) {
                $("#modalContent").html(response);
                $("#modalBackdrop, #modalContent").show();
                window.OnOK = function () {

                    fetchServers();
                    $("#modalBackdrop, #modalContent").hide();

                };

                window.OnCancel = function () {
                    $("#modalBackdrop, #modalContent").hide();
                };
            },
            error: function () {
                alert("Failed to load the form.");
            }
        });

    }

    $(document).ready(function () {
        contextMenu = document.getElementById('contextMenu');

        // Hide context menu on clicking elsewhere
        document.addEventListener('click', function (e) {
            if (!contextMenu.contains(e.target)) {
                contextMenu.style.display = 'none';
            }
        });

        // Assuming contextMenu is correctly defined and selected earlier in your script
        document.getElementById('serverList').addEventListener('contextmenu', function (e) {
            e.preventDefault(); // Prevent the default context menu
            let target = e.target;
            while (target != null && !target.classList.contains('server')) {
                target = target.parentNode; // Ensure we're getting the .server div even if an img or child element is clicked
            }
            if (target) {
                // Show and position the custom context menu
                contextMenu.style.display = 'block';
                contextMenu.style.left = `${e.pageX}px`;
                contextMenu.style.top = `${e.pageY}px`;

                // Set the server ID for later actions
                const serverId = target.getAttribute('data-server-id');
                const isOwner = target.getAttribute('data-server-is-owner');

                if (serverId == "Hub" || serverId == "CreateServer") {
                    contextMenu.style.display = 'none';
                    return;
                } else {

                    contextMenu.setAttribute('data-server-id', serverId);
                    contextMenu.setAttribute('data-server-is-owner', isOwner);
                    $("#contextMenu").html(
                        '<ul>' +
                        (isOwner != "true"? '<li id="removeServer">Leave Server</li>' : "" ) +
                        (isOwner == "true" ? '<li id="deleteServer">Delete Server</li>' : '') +
                        (isOwner == "true" ? '<li id="createInvite">Create Invite</li>' : '') +
                        '</ul>');

                    if (isOwner == "true") {
                        document.getElementById('createInvite').addEventListener('click', function () {
                            const serverId = contextMenu.getAttribute('data-server-id');
                            console.log(`Creating invite for server ${serverId}`);
                            // Implement your code to create an invite code here
                            contextMenu.style.display = 'none';
                        });

                        document.getElementById('deleteServer').addEventListener('click', function () {
                            const serverId = contextMenu.getAttribute('data-server-id');
                            console.log(`Deleting server ${serverId}`);
                            showModalDeleteServer(serverId);
                            contextMenu.style.display = 'none';

                        });
                    }
                }
            }
        });

        document.getElementById('channelList').addEventListener('contextmenu', function (e) {
            e.preventDefault(); // Prevent the default context menu
            let target = e.target;
            while (target != null && !target.classList.contains('channel')) {
                target = target.parentNode; // Ensure we're getting the .server div even if an img or child element is clicked
            }
            if (target) {
                // Show and position the custom context menu
                contextMenu.style.display = 'block';
                contextMenu.style.left = `${e.pageX}px`;
                contextMenu.style.top = `${e.pageY}px`;

                // Set the server ID for later actions
                const channelId = target.getAttribute('data-channel-id');
                const serverId = target.getAttribute('data-server-id');
                const isOwner = target.getAttribute('data-server-is-owner');

                if (isOwner != 'true' || channelId == "CreateChannel") {
                    contextMenu.style.display = 'none';
                    return;
                } else {
                    contextMenu.setAttribute('data-server-id', serverId);
                    contextMenu.setAttribute('data-server-is-owner', isOwner);
                    contextMenu.setAttribute('data-channel-id', channelId);
                    $("#contextMenu").html(
                        '<ul><li id="removeChannel">Remove Channel</li></ul>');

                    document.getElementById('removeChannel').addEventListener('click', function () {
                        const channelId = contextMenu.getAttribute('data-channel-id');
                        console.log(`Deleting channel ${channelId}`);
                        showModalDeleteChannel(channelId);
                        contextMenu.style.display = 'none';

                    });
                }
            }
        });

        // Global click to hide the context menu
        document.addEventListener('click', function (e) {
            if (!contextMenu.contains(e.target)) {
                contextMenu.style.display = 'none';
            }
        });

        document.getElementById('userList').style.display = 'block'; // Hide users list by default
        document.getElementById('toggleUserListBtn').textContent = '-'; // Set initial button text

        document.getElementById('toggleUserListBtn').addEventListener('click', function () {
            const userList = document.getElementById('userList');
            if (userList.style.display === 'none' || userList.style.display === '') {
                userList.style.display = 'block'; // Show the users list
                this.textContent = '-'; // Optional: Change button text
            } else {
                userList.style.display = 'none'; // Hide the users list
                this.textContent = '+'; // Optional: Change button text
            }
        });

        let startX, startWidth;
        let resizePanel;
        function initResize(e) {
            startX = e.clientX;
            const panel = e.target.previousElementSibling; // Get the panel before the divider
            resizePanel = panel;
            startWidth = panel.offsetWidth;
            resizePanel.classList.add('panel-highlight'); // Highlight the panel being resized

            document.documentElement.addEventListener('mousemove', doResize, false);
            document.documentElement.addEventListener('mouseup', stopResize, false);
        }

        function doResize(e) {
            //const panel = this.querySelector('.resize-handle').previousElementSibling; // Panel before the divider
            //const panel = e.srcElement.previousElementSibling; // Panel before the divider
            const newWidth = startWidth + e.clientX - startX;
            resizePanel.style.width = `${newWidth}px`;
        }

        function stopResize() {
            document.documentElement.removeEventListener('mousemove', doResize, false);
            document.documentElement.removeEventListener('mouseup', stopResize, false);
            resizePanel.classList.remove('panel-highlight'); // Remove highlight from the panel
        }

        const resizeChannelHandle = document.getElementById('resizeChannel');
        const resizeMessagesHandle = document.getElementById('resizeMessages');

        // Initialize the resizable functionality
        resizeChannelHandle.addEventListener('mousedown', initResize, false);
        resizeMessagesHandle.addEventListener('mousedown', initResize, false);
    });

</script>

