@page
@model IndexModel
@inject Services.ChatService ChatService

@{
    //var recentMessages = await ChatService.GetRecentMessagesAsync();
}
@section HeaderScripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/js/Chat.js" asp-append-version="true"></script>
}
@section Styles {
    <style>
        #connectionStatus {
            background-color: yellow;
            color: black;
            text-align: center;
            width: 100%;
            padding: 10px 0;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1000; /* Ensures it's above other content */
        }

        .hidden {
            display: none !important;
        }

        .visible {
            display: block !important;
        }

        .chat-container {
            display: flex;
        }

        #channelList {
            width: 20%;
            border-right: 1px solid #ddd;
            padding: 10px;
            height: 300px; /* Adjust based on your layout */
            overflow-y: auto;
        }

        #serverList {
            
            border-right: 1px solid #ddd;
            padding: 10px, 10px, 10px, 10px;
            height: 300px; /* Adjust based on your layout */
            overflow-y: auto;
        }

        #channelList {
            width: 20%;
            border-right: 1px solid #ddd;
            padding: 10px;
            height: 300px; /* Adjust based on your layout */
            overflow-y: auto;
        }

        .server, .channel {
            border: 1px solid #aaa;
            padding: 5px;
            margin-bottom: 5px;
            cursor: pointer;
        }

        .server:hover, .channel:hover {
            background-color: #f0f0f0;
        }

        .selected-server, .selected-channel {
            background-color: #ddd; /* Background color for selected server/channel */
        }

        .server img {
            padding-right: 5px;
            cursor: pointer;
            transition: transform 0.2s; /* Animation for hover effect */
        }

        .server img:hover {
            transform: scale(1.1); /* Slightly enlarges the thumbnail on hover */
        }

        #messages {
            flex-grow: 1;
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 20px;
            max-height: 80px;
            overflow-y: scroll;
            display: flex;
            flex-direction: column-reverse; /* Keep the scroll bar at the bottom initially */
        }

        .context-menu {
            display: none;
            position: fixed;
            z-index: 1000;
            width: 200px;
            background: white;
            border: 1px solid #ddd;
            box-shadow: 0px 0px 5px #aaa;
        }

        .context-menu ul {
            list-style: none;
            margin: 0;
            padding: 0;
        }

        .context-menu ul li {
            padding: 10px;
            cursor: pointer;
        }

        .context-menu ul li:hover {
            background-color: #f0f0f0;
        }

        #userList div {
            padding: 5px;
            margin-bottom: 5px;
            border-bottom: 1px solid #eee;
        }

        #toggleUserListBtn {
            padding: 2px 5px; /* Reduce vertical padding */
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            display: inline-block;
            font-size: 16px; /* Adjust based on your content */
            line-height: 1; /* Adjust line height to fit the content */
            max-height: 20px;
        }


        #toggleUserListBtn:hover {
            background-color: #0056b3;
        }

        .user-item {
            display: flex;
            align-items: center;
            gap: 8px; /* Adjust spacing between elements */
            margin-bottom: 10px; /* Space between user items */
        }

        .status-icon, .owner-icon {
            width: 32px; /* Adjust size as needed */
            height: 32px; /* Adjust size as needed */
        }
    </style>
}


<!-- Modal Backdrop -->
<div id="modalBackdrop" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); z-index:1040;"></div>

<!-- Modal Content -->
<div id="modalContent" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); z-index:1050; background:white; padding:40px; border-radius:5px; border: 2px solid #000; max-width:90%; max-height:90%; overflow:auto;">
    <!-- AJAX content will be loaded here -->
</div>


<div id="connectionStatus" class="hidden">Disconnected - Attempting to reconnect...</div>

<div id="contextMenu" class="context-menu">
    <ul>
        <li id="createInvite">Create Invite Code</li>
        <li id="deleteServer">Delete Server</li>
    </ul>
</div>

<span style="align-content:center"><input id="AudioCheckbox" type="checkbox" /> Audio</span>

<div class="chat-container">
    <div>
    
        <div id="serverList">
            <!-- Servers will be listed here -->
        
            <!-- Add more servers as needed -->
       
        </div>
        <div style="max-width: 300px;">
            <span id="serverInviteCode"></span>
        </div>
    </div>
    <div id="channelList" style="min-width: 300px">
        <!-- Channels will be listed here -->
       
        <!-- Add more channels as needed -->
    </div>

    <div>
        <!-- Existing message-related elements -->
        <div id="messages"></div>
        <input type="text" id="messageInput" style="width: 80%;" />
        <button id="sendButton">Send</button>
    </div>

    <button id="toggleUserListBtn">-</button>

    <div id="userList" style="min-width: 200px; border-left: 1px solid #ddd; padding: 10px; height: 300px; overflow-y: auto;">
        <!-- User list for the selected server will be displayed here -->
    </div>
</div>

<script>
    

    // Sending a message
    document.getElementById("sendButton").addEventListener("click", function (event) {
        var user = "User"; // You might want to use a more dynamic way to get the user's name
        if (selectedServerId && selectedChannelId) { 
            var message = document.getElementById("messageInput").value;
            connection.invoke("SendMessage", selectedChannelId, message).catch(function (err) {
                return console.error(err.toString());
            });
            document.getElementById("messageInput").value = ''; // Clear the input after sending
            event.preventDefault();
        }
    });

    
    
    async function showModalCreateServer() {
        $.ajax({
            url: "/CreateServer", // Adjust the URL as needed
            success: function (response) {
                $("#modalContent").html(response);
                $("#modalBackdrop, #modalContent").show();
                window.OnOK = function () {

                    fetchServers();
                    $("#modalBackdrop, #modalContent").hide();

                };

                window.OnCancel = function () {
                    $("#modalBackdrop, #modalContent").hide();
                };
            },
            error: function () {
                alert("Failed to load the form.");
            }
        });

    }

    async function showModalDeleteServer(ServerId) {
        $.ajax({
            url: "/DeleteServer?ServerId=" + ServerId, // Adjust the URL as needed
            success: function (response) {
                $("#modalContent").html(response);
                $("#modalBackdrop, #modalContent").show();
                window.OnOK = function () {

                    fetchServers();
                    $("#modalBackdrop, #modalContent").hide();

                };

                window.OnCancel = function () {
                    $("#modalBackdrop, #modalContent").hide();
                };
            },
            error: function () {
                alert("Failed to load the form.");
            }
        });

    }

    async function showModalCreateChannel(ServerId) {
        $.ajax({
            url: "/CreateChannel?serverId=" + ServerId, // Adjust the URL as needed
            success: function (response) {
                $("#modalContent").html(response);
                $("#modalBackdrop, #modalContent").show();
                window.OnOK = function () {

                    fetchServers();
                    $("#modalBackdrop, #modalContent").hide();

                };

                window.OnCancel = function () {
                    $("#modalBackdrop, #modalContent").hide();
                };
            },
            error: function () {
                alert("Failed to load the form.");
            }
        });

    }
    
    $(document).ready(function () {
        contextMenu = document.getElementById('contextMenu');

        // Hide context menu on clicking elsewhere
        document.addEventListener('click', function (e) {
            if (!contextMenu.contains(e.target)) {
                contextMenu.style.display = 'none';
            }
        });

        // Option click handler
        document.getElementById('createInvite').addEventListener('click', function () {
            const serverId = contextMenu.getAttribute('data-server-id');
            console.log(`Creating invite for server ${serverId}`);
            // Implement your code to create an invite code here
            contextMenu.style.display = 'none';
        });

        document.getElementById('deleteServer').addEventListener('click', function () {
            const serverId = contextMenu.getAttribute('data-server-id');
            console.log(`Deleting server ${serverId}`);
            showModalDeleteServer(serverId);
            contextMenu.style.display = 'none';

        });
        

        // Assuming contextMenu is correctly defined and selected earlier in your script
        document.getElementById('serverList').addEventListener('contextmenu', function (e) {
            e.preventDefault(); // Prevent the default context menu
            let target = e.target;
            while (target != null && !target.classList.contains('server')) {
                target = target.parentNode; // Ensure we're getting the .server div even if an img or child element is clicked
            }
            if (target) {
                // Show and position the custom context menu
                contextMenu.style.display = 'block';
                contextMenu.style.left = `${e.pageX}px`;
                contextMenu.style.top = `${e.pageY}px`;

                // Set the server ID for later actions
                const serverId = target.getAttribute('data-server-id');
                contextMenu.setAttribute('data-server-id', serverId);
            }
        });

        // Global click to hide the context menu
        document.addEventListener('click', function (e) {
            if (!contextMenu.contains(e.target)) {
                contextMenu.style.display = 'none';
            }
        });

        document.getElementById('userList').style.display = 'block'; // Hide users list by default
        document.getElementById('toggleUserListBtn').textContent = '-'; // Set initial button text

        document.getElementById('toggleUserListBtn').addEventListener('click', function () {
            const userList = document.getElementById('userList');
            if (userList.style.display === 'none' || userList.style.display === '') {
                userList.style.display = 'block'; // Show the users list
                this.textContent = '-'; // Optional: Change button text
            } else {
                userList.style.display = 'none'; // Hide the users list
                this.textContent = '+'; // Optional: Change button text
            }
        });
    });
    
</script>

